version: 2.1

orbs:
  win: circleci/windows@2.2.0
  aws-s3: circleci/aws-s3@1.0.15
  aws-cli: circleci/aws-cli@1.0.0
  coveralls: coveralls/coveralls@1.0.6

commands:
  set_s3_pkg_urls:
    steps:
      - run:
          name: Set S3 URLs according to date and git hash
          environment:
            GIT_REVISION: << pipeline.git.revision >>
            PIPELINE_NUMBER: << pipeline.number >>
          command: |
            echo "export S3_PKG_BUCKET=salto-cli-releases" >> $BASH_ENV
            echo "export PKG_PREFIX=${GIT_REVISION:0:8}_${PIPELINE_NUMBER}" >> $BASH_ENV
            source $BASH_ENV
            echo "export S3_PKG_HASH_PREFIX=s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/${PKG_PREFIX}" >> $BASH_ENV
            source $BASH_ENV

  upload_pkg:
    parameters:
      workspace_dir:
        type: string

      out_filename:
        type: string

    steps:
      - set_s3_pkg_urls

      - store_artifacts:
          path: packages/<< parameters.workspace_dir >>/pkg
          destination: pkg/<< parameters.out_filename >>

      - aws-s3/sync:
          from: packages/<< parameters.workspace_dir >>/pkg
          to: ${S3_PKG_HASH_PREFIX}/<< parameters.out_filename >>

jobs:
  build:
    docker:
      - image: circleci/node:12.16

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project

    steps:
      - restore_cache:
          keys:
            - v1-project-{{ .Branch }}
            - v1-project-master

      - checkout

      - run:
          name: remove empty directories from the packages dir
          command: |
            find ./packages -mindepth 1 -maxdepth 1 -type d '!' -exec test -e "{}/package.json" ';' -print \
              | xargs --no-run-if-empty rm -r

      - run:
          # eslint will verify that the license header exists on the linted source files, this step is
          # to verify that other non-linted files also contains the license header (and therefore this is
          # in the 'build' job)
          name: verify that the license header is prepended to the non eslint'd source files
          command: build_utils/verify_license_header.sh

      - run: yarn config set ignore-engines true

      - run: yarn config set cache-folder /mnt/ramdisk/yarn-cache

      - run: yarn

      - run:
          # As a workaround to the --frozen-lockfile flag not working with workspaces
          # (see: https://github.com/yarnpkg/yarn/issues/4098)
          # we use a regular `yarn` and add an explicit test that the yarn.lock file is unchanged
          name: ensure yarn.lock file is up to date
          command: "! git diff --name-only | grep yarn.lock"

      - run:
          name: fix eslint cache
          command: yarn lerna exec ../../build_utils/fix_eslint_cache.sh

      - run: yarn build

      - persist_to_workspace:
          root: .
          paths: '*'

  save_project_cache:
    docker:
      - image: cimg/base:2020.01

    steps:
      - attach_workspace:
          at: .

      - save_cache:
          paths:
            - .
          key: v1-project-{{ .Branch }}-{{ epoch }}

  unit_test:
    docker:
      - image: circleci/node:12.16

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Run unit tests
          command: yarn test -w 4 --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: "reports/unittests/test-results.xml"

      - store_test_results:
          path: reports

      - coveralls/upload

  publish_on_version_change:
    docker:
      - image: circleci/node:12.16

    steps:
      - attach_workspace:
          at: .

      - add_ssh_keys:
          fingerprints:
              - "49:dd:95:76:13:c0:cd:9d:75:48:b0:30:5c:3c:4c:17"

      - set_s3_pkg_urls

      - aws-cli/setup

      - run:
          name: Release version
          command: ./.circleci/scripts/release_version.sh << pipeline.git.base_revision >>

  e2e_test:
    docker:
      - image: saltolabs/salto-e2e:latest

    resource_class: large
    working_directory: /mnt/ramdisk/project

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Run E2E tests
          command: yarn test --reporters=default --reporters=jest-junit --coverage=false
          no_output_timeout: 20m
          environment:
            RUN_E2E_TESTS: '1'
            SALTO_LOG_LEVEL: 'info'
            # enable telemetry for end2end so we can count more events
            # webpack configuration is irrelevant in this case and therefore
            # we explicitly configure it in here
            SALTO_TELEMETRY_DISABLE: '0'
            SALTO_TELEMETRY_URL: 'https://telemetry.salto.io'
            JEST_JUNIT_OUTPUT: 'reports/e2e/test-results.xml'

      - store_test_results:
          path: reports

  package_cli:
    docker:
      - image: circleci/node:12.16

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Build native executables
          command: yarn workspace @salto-io/cli package

      - upload_pkg:
          workspace_dir: cli
          out_filename: cli

  test_cli_mac:
    macos:
      xcode: 11.3.0

    steps:
      - set_s3_pkg_urls

      - aws-s3/copy:
          from: ${S3_PKG_HASH_PREFIX}/cli/mac/salto
          to: .

      - run:
          command: chmod +x ./salto

      - run:
          name: run CLI --help
          command: ./salto --help

  test_cli_linux:
    docker:
      - image: circleci/node:12.16

    steps:
      - set_s3_pkg_urls

      - aws-s3/copy:
          from: ${S3_PKG_HASH_PREFIX}/cli/linux/salto
          to: .

      - run:
          command: chmod +x ./salto

      - run:
          name: run CLI --help
          command: ./salto --help

  test_cli_win:
    executor:
      name: win/default
      shell: bash.exe

    steps:
      - set_s3_pkg_urls

      - aws-s3/copy:
          from: ${S3_PKG_HASH_PREFIX}/cli/win/salto.exe
          to: .

      - run:
          name: run CLI --help
          command: ./salto.exe --help

  package_vscode_extension:
    docker:
      - image: circleci/node:12.16

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create a VSIX file
          command: yarn workspace salto-vscode package

      - upload_pkg:
          workspace_dir: vscode
          out_filename: vscode/salto.vsix

  sync_s3_pkg_latest:
    docker:
      - image: circleci/python

    steps:
      - set_s3_pkg_urls

      - aws-s3/sync:
          from: ${S3_PKG_HASH_PREFIX}/
          to: s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/latest/
          arguments: '--delete --acl public-read'

      - run:
          name: Create a marker file with the git hash
          command: touch ./PACKAGED_FROM.${PKG_PREFIX}

      - aws-s3/copy:
          from: ./PACKAGED_FROM.${PKG_PREFIX}
          to: s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/latest/
          arguments: '--acl public-read'

  publish_canary:
    docker:
      - image: circleci/node:12.16

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Set NPM token
          command: |
            # set token at npmrc - without making the git local copy dirty
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
            echo ".npmrc" >> .git/info/exclude
            git update-index --assume-unchanged .npmrc

      - run:
          name: Set git identity
          command: |
            # version git commit is not pushed, so this just needs to be configured
            git config user.email "$(git log -1 --format='%ae')"
            git config user.name "$(git log -1 --format='%an')"

      - run:
          name: Publish canary version
          command: .circleci/scripts/publish-canary.sh

workflows:
  version: 2

  commit:
    jobs:
      - build

      - save_project_cache:
          requires:
            - build

      - unit_test:
          requires:
            - build

      - e2e_test:
          requires:
            - build

      - test_cli_mac:
          requires:
            - package_cli

      - test_cli_linux:
          requires:
            - package_cli

      - test_cli_win:
          requires:
            - package_cli

      - package_cli:
          requires:
            - build
            - unit_test
            # - e2e_test

      - package_vscode_extension:
          requires:
            - build
            - unit_test
            # - e2e_test

      - sync_s3_pkg_latest:
          requires:
            - package_cli
            - package_vscode_extension

      - publish_canary:
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - unit_test
            - e2e_test

      - publish_on_version_change:
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - unit_test
            - e2e_test
