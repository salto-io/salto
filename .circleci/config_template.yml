
version: 2.1

orbs:
  win: circleci/windows@5.0.0
  aws-s3: circleci/aws-s3@4.0.0
  aws-cli: circleci/aws-cli@4.1.3
  coveralls: coveralls/coveralls@2.2.1
  macos: circleci/macos@2.5.1

commands:
  
  restore_intermediate:
    description: restore intermediate artifacts between steps
    steps:
      - attach_workspace:
          at: .workspace
      - run:
          name: restore intermediate artifacts between steps
          command: |
            tar -xzf .workspace/workspace.tar.gz
            rm .workspace/workspace.tar.gz

  store_intermediate:
    description: store intermediate artifacts between steps
    steps:
      - run:
          name: store intermediate artifacts between steps
          command: |
            mkdir -p .workspace
            tar --exclude='./.workspace' --exclude='coverage' --exclude='./node_modules' --exclude="./.yarn" --exclude="./.yarnrc.yml" --exclude="./.turbo" -czf .workspace/workspace.tar.gz .
      - persist_to_workspace:
          root: .workspace
          paths:
            - workspace.tar.gz

  restore_node_modules:
    description: restore node modules
    steps:
      - restore_cache:
          name: restore node modules
          keys:
            - &node-modules-cache node-modules-v4-{{ arch }}}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - node-modules-v2-{{ arch }}}-{{ .Branch }}
            - node-modules-v2-{{ arch }}}-main
  
  store_node_modules:
    description: cache store node_modules
    steps:
      - save_cache:
          name: cache store node_modules
          key: *node-modules-cache
          when: always
          paths:
            - /mnt/ramdisk/project/node_modules

  restore_yarn_cache:
    description: restore yarn cache
    steps:
      - restore_cache:
          name: restore yarn cache
          keys:
            - &yarn-cache yarn-cache-v2-{{ arch }}}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-v2-{{ arch }}}-{{ .Branch }}
            - yarn-cache-v2-{{ arch }}}-main

  store_yarn_cache:
    description: cache store yarn cache
    steps:
      - save_cache:
          name: cache store yarn cache
          key: *yarn-cache
          when: always
          paths:
            - /mnt/ramdisk/project/.yarn

  restore_turbo_cache:
    description: load a turbocache
    parameters:
      cache_name:
        type: string
    steps:
      - restore_cache:
          name: load turbocache for << parameters.cache_name >>
          keys:
            - &turbo-cache turbo-cache-v1-<< parameters.cache_name >>-{{ .Branch }}-{{ epoch }}
            - turbo-cache-v1-<< parameters.cache_name >>-{{ .Branch }}
            - turbo-cache-v1-<< parameters.cache_name >>-main

  store_turbo_cache:
    description: cache store turbo cache
    parameters:
      cache_name:
        type: string
    steps:
      - save_cache:
          name: store turbocache for << parameters.cache_name >>
          key: *turbo-cache
          when: always
          paths:
            - /mnt/ramdisk/project/.turbo


  setup_yarn:
    description: set up yarn berry
    steps:
      - run:
          name: set up yarn berry
          command: |
            sudo corepack enable
          env:
            YARN_CACHE_FOLDER: /mnt/ramdisk/project/.yarn/cache

  run_e2e_tests:
    parameters:
      should_install_java:
        type: boolean
        default: false
      package_name:
        type: string
    steps:
      - when:
          condition: << parameters.should_install_java >>
          steps:
            run:
              name: Install Java
              command: sudo apt update && sudo apt install -y openjdk-17-jdk --no-install-recommends
      - run:
          name: Run E2E tests for package << parameters.package_name >>
          command: |
            pushd packages/<< parameters.package_name >>
            yarn e2e-test --reporters=default --reporters=jest-junit --coverage=false
          no_output_timeout: 20m
          environment:
            SALTO_LOG_LEVEL: 'info'
            # enable telemetry for end2end so we can count more events
            # webpack configuration is irrelevant in this case and therefore
            # we explicitly configure it in here
            SALTO_TELEMETRY_DISABLE: '0'
            SALTO_TELEMETRY_URL: 'https://telemetry.salto.io'
            JEST_JUNIT_OUTPUT_DIR: 'reports/e2e/'

      - store_test_results:
          path: reports

  set_s3_pkg_urls:
    steps:
      - run:
          name: Set S3 URLs according to date and git hash
          environment:
            GIT_REVISION: << pipeline.git.revision >>
            PIPELINE_NUMBER: << pipeline.number >>
          command: |
            echo "export S3_PKG_BUCKET=salto-cli-releases" >> $BASH_ENV
            echo "export PKG_PREFIX=${GIT_REVISION:0:8}_${PIPELINE_NUMBER}" >> $BASH_ENV
            source $BASH_ENV
            echo "export S3_PKG_HASH_PREFIX=s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/${PKG_PREFIX}" >> $BASH_ENV
            source $BASH_ENV

  upload_pkg:
    parameters:
      workspace_dir:
        type: string

      out_filename:
        type: string

    steps:
      - aws-cli/install
      - aws-cli/setup
      - set_s3_pkg_urls
      - store_artifacts:
          path: packages/<< parameters.workspace_dir >>/pkg
          destination: pkg/<< parameters.out_filename >>

      - aws-s3/sync:
          from: packages/<< parameters.workspace_dir >>/pkg
          to: ${S3_PKG_HASH_PREFIX}/<< parameters.out_filename >>

  test_cli:
    parameters:
        arch:
            description: linux, mac, win
            type: string
        exe_name:
            description: name of executable (e.g. salto, salto.exe)
            type: string
    steps:
      - aws-cli/install
      - aws-cli/setup
      - set_s3_pkg_urls
      - aws-s3/copy:
          from: ${S3_PKG_HASH_PREFIX}/cli/<< parameters.arch >>/<< parameters.exe_name >>
          to: .
      - run: echo << parameters.arch >>
      - when:
          condition:
            not: 
              equal: [ win, << parameters.arch >> ]
          steps:
            - run: chmod +x ./<< parameters.exe_name >>
      - run:
          name: run CLI --help
          command: ./<< parameters.exe_name >> --help

      - run:
          name: Test CLI init
          command: |
            mkdir workspace
            pushd workspace
            ../<< parameters.exe_name >> init -e env1

jobs:
  install:
    docker:
      - image: cimg/node:18.9

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project

    steps:
      - checkout
      - restore_yarn_cache
      - setup_yarn
      - run: 
          name: install node_modules with yarn
          command: yarn --immutable
      - store_yarn_cache
      - store_node_modules

  compile:
    docker:
      - image: cimg/node:18.9

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project
    environment:
      TURBO_CACHE_DIR: /mnt/ramdisk/project/.turbo

    steps:
      - checkout
      - restore_node_modules
      - restore_turbo_cache:
          cache_name: compile
      - setup_yarn
      - run:
          name: prebuild
          command: yarn pre-build
      - run:
          name: compile
          command: yarn build-ts
      - store_turbo_cache:
          cache_name: compile
      - store_intermediate

  lint:
    docker:
      - image: cimg/node:18.9

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project
    environment:
      TURBO_CACHE_DIR: /mnt/ramdisk/project/.turbo

    steps:
      - checkout
      - restore_node_modules
      - restore_turbo_cache:
          cache_name: lint
      - setup_yarn

      - run:
          # eslint will verify that the license header exists on the linted source files, this step is
          # to verify that other non-linted files also contains the license header (and therefore this is
          # in the 'build' job)
          name: verify that the license header is prepended to the non eslint'd source files
          command: build_utils/verify_license_header.sh

      - run:
          name: lint
          command: yarn lint

      - store_turbo_cache:
          cache_name: lint

  unit_test:
    parameters:
      package_name: 
        type: string
      parallelism:
        type: integer

    parallelism: << parameters.parallelism >>

    docker:
      - image: cimg/node:18.9

    resource_class: xlarge
    working_directory: /mnt/ramdisk/project

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules
      - restore_turbo_cache:
          cache_name: jest_ut
      - run:
          name: << parameters.package_name >> unit tests
          command: |
            PACKAGE=$(echo "<< parameters.package_name >>" | cut -d':' -f2)
            yarn test --filter="$PACKAGE..."
            # yarn workspace $PACKAGE test -i --reporters=default --reporters=jest-junit --ci --colors --forceExit --detectOpenHandles
          environment:
            JEST_JUNIT_OUTPUT_DIR: 'reports/unittests'

      - store_test_results:
          path: reports
      - store_turbo_cache:
          cache_name: jest_ut

      - coveralls/upload:
          parallel: true
          flag_name: << parameters.package_name >>

  finish_coveralls:
    docker:
      - image: cimg/node:18.9
    steps:
      - coveralls/upload:
          parallel_finished: true

  prettier:
    working_directory: /mnt/ramdisk/project

    docker:
      - image: cimg/node:18.9

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules

      - run:
          name: check format with prettier
          command: yarn check-format

  publish_on_version_change:
    working_directory: /mnt/ramdisk/project

    docker:
      - image: cimg/node:18.9

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules

      - add_ssh_keys:
          fingerprints:
            - '49:dd:95:76:13:c0:cd:9d:75:48:b0:30:5c:3c:4c:17'

      - set_s3_pkg_urls

      - aws-cli/install
      - aws-cli/setup

      - run:
          name: Release version
          command: ./.circleci/scripts/release_version.sh << pipeline.git.base_revision >>

  e2e_tests:
    parameters:
      package_name:
        type: string
      should_install_java:
        type: boolean
    docker:
      - image: cimg/node:18.9
    resource_class: large
    working_directory: /mnt/ramdisk/project
    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules
      - run_e2e_tests:
          package_name: <<parameters.package_name>>
          should_install_java: <<parameters.should_install_java>>     

  package_cli:
    working_directory: /mnt/ramdisk/project
    docker:
      - image: cimg/node:18.9

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules
      - run:
          environment:
            PYTHON: '/usr/bin/python3'
          name: Build native executables
          command: yarn workspace @salto-io/cli package

      - upload_pkg:
          workspace_dir: cli
          out_filename: cli

  test_cli_mac:
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.medium.gen1

    steps:
      - macos/install-rosetta
      - test_cli:
          arch: mac
          exe_name: salto

  test_cli_linux:
    docker:
      - image: cimg/node:18.9

    steps:
      - test_cli:
          arch: linux
          exe_name: salto

  test_cli_win:
    executor:
      name: win/default
      shell: bash.exe

    steps:
      - test_cli:
          arch: win
          exe_name: salto.exe

  package_vscode_extension:
    working_directory: /mnt/ramdisk/project
    docker:
      - image: cimg/node:18.9

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules

      - run:
          name: Create a VSIX file
          command: yarn workspace salto-vscode package

      - upload_pkg:
          workspace_dir: vscode
          out_filename: vscode/salto.vsix

  sync_s3_pkg_latest:
    docker:
      - image: cimg/python:3.10

    steps:
      - aws-cli/install
      - aws-cli/setup
      - set_s3_pkg_urls
      - aws-s3/sync:
          from: ${S3_PKG_HASH_PREFIX}/
          to: s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/latest/
          arguments: '--delete --acl public-read'
          profile_name: ''

      - run:
          name: Create a marker file with the git hash
          command: touch ./PACKAGED_FROM.${PKG_PREFIX}

      - aws-s3/copy:
          from: ./PACKAGED_FROM.${PKG_PREFIX}
          to: s3://${S3_PKG_BUCKET}/${CIRCLE_BRANCH}/latest/
          arguments: '--acl public-read'

  publish_canary:
    working_directory: /mnt/ramdisk/project
    docker:
      - image: cimg/node:18.9

    steps:
      - restore_intermediate
      - setup_yarn
      - restore_node_modules

      - run:
          name: Set NPM token
          command: |
            # set token at npmrc - without making the git local copy dirty
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
            echo ".npmrc" >> .git/info/exclude
            git update-index --assume-unchanged .npmrc

      - run:
          name: Set git identity
          command: |
            # version git commit is not pushed, so this just needs to be configured
            git config user.email "$(git log -1 --format='%ae')"
            git config user.name "$(git log -1 --format='%an')"

      - run:
          name: Publish canary version
          command: .circleci/scripts/publish-canary.sh

workflows:
  commit:
    jobs:
      - install
      - compile:
          requires:
            - install
      - lint:
          requires:
            - install
      # <TEST_MATRIX_UT>
      # <TEST_MATRIX_E2E>
      # <TEST_MATRIX_E2E_JAVA>

      - finish_coveralls:
          requires:
            - unit_test

      - prettier:
          requires:
            - compile

      - test_cli_mac:
          requires:
            - package_cli

      - test_cli_linux:
          requires:
            - package_cli

      - test_cli_win:
          requires:
            - package_cli

      - package_cli:
          requires:
            - compile
            - lint
            - unit_test

      - package_vscode_extension:
          requires:
            - compile
            - lint
            - unit_test

      - sync_s3_pkg_latest:
          requires:
            - package_cli
            - package_vscode_extension

      - publish_canary:
          context: salto
          filters:
            branches:
              only:
                - main
          requires:
            - compile
            - lint
            - unit_test
            # <NEEDS_E2E_TEST_REQUIREMENT>
            # <NEEDS_E2E_TEST_REQUIREMENT_JAVA>

      - publish_on_version_change:
          context: salto
          filters:
            branches:
              only:
                - main
          requires:
            - compile
            - lint
            - unit_test
            # <NEEDS_E2E_TEST_REQUIREMENT>
            # <NEEDS_E2E_TEST_REQUIREMENT_JAVA>