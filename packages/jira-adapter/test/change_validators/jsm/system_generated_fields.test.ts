/*
 * Copyright 2025 Salto Labs Ltd.
 * Licensed under the Salto Terms of Use (the "License");
 * You may not use this file except in compliance with the License.  You may obtain a copy of the License at https://www.salto.io/terms-of-use
 *
 * CERTAIN THIRD PARTY SOFTWARE MAY BE CONTAINED IN PORTIONS OF THE SOFTWARE. See NOTICE FILE AT https://github.com/salto-io/salto/blob/main/NOTICES
 */
import { toChange, ObjectType, ElemID, InstanceElement } from '@salto-io/adapter-api'
import each from 'jest-each'
import { FIELD_TYPE_NAME } from '../../../src/filters/fields/constants'
import { systemGeneratedFieldsValidator } from '../../../src/change_validators/jsm/system_generated_fields'
import { JIRA } from '../../../src/constants'

const MESSAGE_TITLE = 'Deploying this field can create duplicate fields in the target environment'
const DETAILED_MESSAGE = (templateName: string): string =>
  `The field is auto-generated by Atlassian. To create or modify it in the target environment, create a first project from a template of ${templateName}. For more information, see the documentation at: https://help.salto.io/en/articles/10501649-jira-service-management-system-generated-fields`

describe('systemGeneratedFieldsValidator', () => {
  const fieldType = new ObjectType({ elemID: new ElemID(JIRA, FIELD_TYPE_NAME) })
  let instance: InstanceElement

  it('should not return an error if a field is system generated', async () => {
    instance = new InstanceElement('instance', fieldType)
    expect(
      await systemGeneratedFieldsValidator([
        toChange({
          after: instance,
        }),
      ]),
    ).toEqual([])
  })
  each([
    ['Pending_reason__select__c@suuuu', 'IT Service Management'],
    ['Affected_hardware__textfield__c@suuuu', 'IT Service Management'],
    ['Accessibility_needs__textarea__c@suuuu', 'HR Service Management'],
    ['Team__textfield__c', 'HR Service Management'],
  ]).it('should return an error with the relevant template for the field %s', async (fieldName, templateName) => {
    instance = new InstanceElement(fieldName, fieldType)
    expect(
      await systemGeneratedFieldsValidator([
        toChange({
          after: instance,
        }),
      ]),
    ).toEqual([
      {
        elemID: instance.elemID,
        severity: 'Error',
        message: MESSAGE_TITLE,
        detailedMessage: DETAILED_MESSAGE(templateName),
      },
    ])
  })
  it('should return proper error messages for several fields', async () => {
    instance = new InstanceElement('Product_categorization__cascadingselect__c@suuuu', fieldType)
    const instance2 = new InstanceElement('Urgency__select__c', fieldType)
    const instance3 = new InstanceElement('Personal_email_address__textfield__c@ssuuuu', fieldType)
    expect(
      await systemGeneratedFieldsValidator([
        toChange({
          after: instance,
        }),
        toChange({
          before: instance2,
        }),
        toChange({
          before: instance2,
          after: instance3,
        }),
      ]),
    ).toEqual([
      {
        elemID: instance.elemID,
        severity: 'Error',
        message: MESSAGE_TITLE,
        detailedMessage: DETAILED_MESSAGE('IT Service Management'),
      },
      {
        elemID: instance3.elemID,
        severity: 'Error',
        message: MESSAGE_TITLE,
        detailedMessage: DETAILED_MESSAGE('HR Service Management'),
      },
    ])
  })
  it('should not return an error if not a field type', async () => {
    instance = new InstanceElement(
      'Product_categorization__cascadingselect__c@suuuu',
      new ObjectType({ elemID: new ElemID(JIRA, 'notFieldType') }),
    )
    expect(
      await systemGeneratedFieldsValidator([
        toChange({
          after: instance,
        }),
      ]),
    ).toEqual([])
  })
})
