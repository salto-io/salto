/*
*                      Copyright 2021 Salto Labs Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { BuiltinTypes, ElemID, Field, isObjectType, ListType, ObjectType, TypeElement } from '@salto-io/adapter-api'
import _ from 'lodash'
import { collections } from '@salto-io/lowerdash'
import { getMetadataTypes } from '../types'
import { NETSUITE } from '../constants'
import { FilterWith } from '../filter'

const { awu } = collections.asynciterable

const fieldNameToTypeName: Record<string, string | undefined> = {
  taxEngine: undefined,
  billableExpensesAcct: undefined,
  pageLogo: 'file',
  restrictToAccountingBookList: undefined,
  accountingContext: undefined,
  nexusId: 'Nexus',
  nexus: 'Nexus',
  logo: 'file',
  location: 'Location',
  unitsType: 'UnitsType',
  interCoAccount: undefined,
  unit: undefined,
  checkLayout: undefined,
  taxFiscalCalendar: undefined,
  taxAgency: undefined,
  fiscalCalendar: undefined,
  currency: 'Currency',
  accountingBook: undefined,
  class: 'Classification',
  deferralAcct: undefined,
  subsidiaryList: 'Subsidiary',
  subsidiary: 'Subsidiary',
  image: 'file',
  file: 'file',
  category1099misc: undefined,
  contact: 'Contact',
  terms: 'Term',
  department: 'Department',
  region: undefined,
  createdFrom: undefined,
  postingPeriod: undefined,
  item: undefined,
  units: undefined,
  billOfMaterials: undefined,
  revision: undefined,
  billOfMaterialsRevision: undefined,
  vendor: 'Vendor',
  cogsAccount: 'Account',
  incomeAccount: 'Account',
  intercoIncomeAccount: 'Account',
  assetAccount: 'Account',
  billQtyVarianceAcct: 'Account',
  billPriceVarianceAcct: 'Account',
  billExchRateVarianceAcct: 'Account',
  gainLossAccount: 'Account',
  salesTaxCode: undefined,
  wipVarianceAcct: 'Account',
  purchaseTaxCode: undefined,
  scrapAcct: 'Account',
  taxSchedule: undefined,
  wipAcct: 'Account',
  stockUnit: undefined,
  purchaseUnit: undefined,
  saleUnit: undefined,
  billingSchedule: undefined,
  deferredRevenueAccount: 'Account',
  revRecSchedule: undefined,
  defaultItemShipMethod: undefined,
  itemShipMethodList: undefined,
  scheduleBCode: undefined,
  issueProduct: undefined,
  softDescriptor: undefined,
  costCategory: 'CostCategory',
  prodQtyVarianceAcct: 'Account',
  prodPriceVarianceAcct: 'Account',
  purchasePriceVarianceAcct: 'Account',
  quantityPricingSchedule: undefined,
  pricingGroup: 'PricingGroup',
  intercoCogsAccount: 'Account',
  itemRevenueCategory: undefined,
  unbuildVarianceAccount: 'Account',
  revenueRecognitionRule: undefined,
  revRecForecastRule: undefined,
  revenueAllocationGroup: undefined,
  createRevenuePlansOn: undefined,
  dropshipExpenseAccount: 'Account',
  preferredLocation: 'Location',
  distributionNetwork: undefined,
  distributionCategory: undefined,
  shipPackage: undefined,
  supplyReplenishmentMethod: undefined,
  alternateDemandSourceItem: undefined,
  supplyType: undefined,
  supplyLotSizingMethod: undefined,
  demandSource: undefined,
  storeDisplayThumbnail: 'file',
  storeDisplayImage: 'file',
  storeItemTemplate: undefined,
  itemNumberOptionsList: undefined,
  itemOptions: undefined,
  vendorCurrency: 'Currency',
  schedule: undefined,
  priceLevel: 'PriceLevel',
  memberUnit: undefined,
  effectiveRevision: undefined,
  obsoleteRevision: undefined,
  amortizationTemplate: undefined,
  defaultForLocationList: undefined,
  inventoryCostTemplate: undefined,
  locationId: 'Location',
  website: undefined,
  category: undefined,
  binNumber: undefined,
  consumptionUnit: undefined,
  hierarchyVersion: undefined,
  hierarchyNode: undefined,
  project: undefined,
  initialTerms: undefined,
  recurrenceTerms: 'Term',
  transaction: undefined,
  paymentTerms: 'Term',
  milestoneTerms: 'Term',
  projectTask: 'ProjectTask',
  company: undefined,
  supportCase: 'SupportCase',
  organizer: undefined,
  owner: undefined,
  attendee: undefined,
  resource: undefined,
  employee: 'Employee',
  customer: 'Customer',
  payrollItem: 'PayrollItem',
  temporaryLocalJurisdiction: undefined,
  temporaryStateJurisdiction: undefined,
  vertical: undefined,
  audience: undefined,
  offer: undefined,
  promotionCode: 'PromotionCode',
  itemList: undefined,
  family: undefined,
  searchEngine: undefined,
  price: 'Price',
  campaignGroup: undefined,
  template: undefined,
  subscription: undefined,
  channel: undefined,
  promoCode: undefined,
  caseTaskEvent: undefined,
  entity: undefined,
  leadSource: 'LeadSource',
  campaignEvent: 'CampaignEvent',
  subsidiaryTaxRegNum: undefined,
  state: 'State',
  taxAgencyPst: undefined,
  taxCode: undefined,
  parentNexus: 'Nexus',
  entityTaxRegNum: undefined,
  salesRep: undefined,
  partner: 'Partner',
  account: 'Account',
  discountItem: 'DiscountItem',
  taxItem: undefined,
  messageSel: undefined,
  paymentOption: undefined,
  paymentProcessingProfile: undefined,
  billAddressList: undefined,
  shipMethod: undefined,
  shippingTaxCode: undefined,
  handlingTaxCode: undefined,
  salesGroup: undefined,
  paymentMethod: 'PaymentMethod',
  creditCard: undefined,
  creditCardProcessor: undefined,
  job: 'Job',
  giftCert: undefined,
  catchUpPeriod: undefined,
  chargeType: undefined,
  chargesList: 'Charge',
  salesRole: 'SalesRole',
  partnerRole: undefined,
  taxType: 'TaxType',
  billingAccount: 'BillingAccount',
  opportunity: 'Opportunity',
  shipAddressList: undefined,
  itemCostDiscount: undefined,
  itemCostTaxCode: undefined,
  expCostDiscount: undefined,
  timeDiscount: undefined,
  expCostTaxCode: undefined,
  timeTaxCode: undefined,
  subscriptionLine: undefined,
  shipAddress: undefined,
  authCode: undefined,
  couponCode: 'CouponCode',
  sourceAddressRef: undefined,
  destinationAddressRef: undefined,
  shippingMethodRef: undefined,
  salesOrder: 'SalesOrder',
  billTo: undefined,
  timeRecord: undefined,
  billingItem: undefined,
  transactionLine: undefined,
  salesOrderLine: undefined,
  invoice: 'Invoice',
  invoiceLine: undefined,
  rule: undefined,
  voidJournal: undefined,
  payeeAddressList: undefined,
  contactSource: undefined,
  supervisor: 'Employee',
  assistant: undefined,
  role: 'role',
  entityStatus: undefined,
  representingSubsidiary: 'Subsidiary',
  territory: undefined,
  prefCCProcessor: undefined,
  shippingItem: undefined,
  accessRole: undefined,
  assignedWebSite: undefined,
  campaignCategory: 'CampaignCategory',
  sourceWebSite: undefined,
  receivablesAccount: undefined,
  drAccount: 'Account',
  fxAccount: 'Account',
  openingBalanceAccount: 'Account',
  defaultTaxReg: undefined,
  salesReadiness: undefined,
  buyingReason: undefined,
  buyingTimeFrame: undefined,
  cardState: undefined,
  group: undefined,
  level: undefined,
  address: 'Address',
  arAcct: 'Account',
  deposit: 'Deposit',
  expenseAccount: 'Account',
  emailEmployees: undefined,
  billingClass: undefined,
  workplace: undefined,
  approver: undefined,
  timeApprover: undefined,
  employeeType: undefined,
  terminationReason: undefined,
  timeOffPlan: undefined,
  employeeStatus: undefined,
  maritalStatus: undefined,
  ethnicity: undefined,
  purchaseOrderApprover: undefined,
  workCalendar: undefined,
  defaultExpenseReportCurrency: 'Currency',
  defaultAcctCorpCardExp: undefined,
  entityCurrency: 'Currency',
  selectedRole: 'role',
  education: undefined,
  position: undefined,
  employmentCategory: undefined,
  reportsTo: undefined,
  forecastType: undefined,
  expenseAcct: 'Account',
  expenseReportCurrency: 'Currency',
  acctCorpCardExp: undefined,
  approvalStatus: undefined,
  nextApprover: undefined,
  expMediaItem: undefined,
  liabilityAccount: 'Account',
  sourceAccount: 'Account',
  destinationAccount: 'Account',
  parentExpenseAlloc: undefined,
  toSubsidiary: 'Subsidiary',
  lineSubsidiary: 'Subsidiary',
  amortizationSched: undefined,
  scheduleNum: undefined,
  tax1Acct: undefined,
  incoterm: undefined,
  transferLocation: 'Location',
  adjLocation: 'Location',
  issueInventoryNumber: undefined,
  toBinNumber: undefined,
  inventoryStatus: undefined,
  toInventoryStatus: undefined,
  componentItem: undefined,
  revReclassFXAccount: 'Account',
  intercoDefRevAccount: 'Account',
  secondaryUnitsType: 'UnitsType',
  secondaryBaseUnit: undefined,
  secondaryStockUnit: undefined,
  secondarySaleUnit: undefined,
  secondaryPurchaseUnit: undefined,
  secondaryConsumptionUnit: undefined,
  issueType: undefined,
  product: undefined,
  module: undefined,
  productTeam: undefined,
  source: undefined,
  reportedBy: undefined,
  reproduce: undefined,
  versionBroken: undefined,
  buildBroken: undefined,
  versionTarget: undefined,
  buildTarget: undefined,
  versionFixed: undefined,
  buildFixed: undefined,
  severity: undefined,
  priority: undefined,
  assigned: undefined,
  reviewer: undefined,
  issueStatus: undefined,
  issueTagsList: undefined,
  emailCellsList: undefined,
  version: 'Version',
  build: undefined,
  issueNumber: undefined,
  requestedBy: undefined,
  inboundShipment: 'InboundShipment',
  itemFulfillment: 'ItemFulfillment',
  sourceLocation: 'Location',
  language: undefined,
  jobType: 'JobType',
  period: undefined,
  jobItem: undefined,
  estimateRevRecTemplate: undefined,
  projectExpenseType: undefined,
  jobResource: undefined,
  timeApproval: undefined,
  billingRateCard: undefined,
  projectManager: undefined,
  taxAccount: 'Account',
  lineTaxCode: undefined,
  weightUnit: undefined,
  locationlookup: undefined,
  serialNumber: undefined,
  manufacturingWorkCenter: undefined,
  manufacturingCostTemplate: 'ManufacturingCostTemplate',
  workOrder: 'WorkOrder',
  order: undefined,
  task: 'Task',
  locationList: 'Location',
  operationDisplayText: undefined,
  noteType: 'NoteType',
  activity: undefined,
  author: undefined,
  folder: 'folder',
  media: undefined,
  record: 'Record',
  recordType: undefined,
  topic: 'Topic',
  winLossReason: 'WinLossReason',
  competitor: undefined,
  roleList: 'role',
  merchantAccountsList: 'Account',
  itemType: undefined,
  milestone: undefined,
  eventId: undefined,
  serviceItem: undefined,
  implementation: undefined,
  discount: undefined,
  freeShipMethod: undefined,
  purchaseContract: undefined,
  shipTo: undefined,
  intercoTransaction: undefined,
  linkedOrderList: undefined,
  landedCostCategory: undefined,
  recordRef: undefined,
  requestedby: undefined,
  allocationResource: undefined,
  allocationType: undefined,
  inventoryLocation: 'Location',
  inventorySubsidiary: 'Subsidiary',
  createdPo: undefined,
  poVendor: 'Vendor',
  orderAllocationStrategy: undefined,
  purchaseAccount: 'Account',
  saleAccount: 'Account',
  nexusCountry: undefined,
  solution: 'Solution',
  insertSolution: 'Solution',
  profile: undefined,
  issue: 'Issue',
  status: 'Status',
  origin: undefined,
  escalatee: undefined,
  timeSheet: 'TimeSheet',
  payablesAccount: 'Account',
  purchaseOrderList: 'PurchaseOrder',
  billreceiptsList: undefined,
  serialNumbersList: undefined,
  apAcct: 'Account',
  manufacturingRouting: 'ManufacturingRouting',
  assemblyItem: 'AssemblyItem',
  startOperation: undefined,
  endOperation: undefined,
}

const getFieldType = (
  type: ObjectType,
  field: Field,
  typeMap: Record<string, TypeElement>
): TypeElement | undefined => {
  if (field.name === 'parent') {
    return type
  }
  const typeName = fieldNameToTypeName[field.name]
  return typeName !== undefined ? typeMap[typeName] : undefined
}

const filterCreator = (): FilterWith<'onFetch'> => ({
  onFetch: async elements => {
    const recordRefElemId = new ElemID(NETSUITE, 'RecordRef')

    const recordRefType = elements.filter(isObjectType).find(e => e.elemID.isEqual(recordRefElemId))
    if (recordRefType === undefined) {
      return
    }

    recordRefType.fields.id = new Field(recordRefType, 'id', BuiltinTypes.STRING)

    const types = elements.filter(isObjectType)
    const typeMap = _.keyBy([...types, ...getMetadataTypes()], e => e.elemID.name)

    await awu(types).forEach(async element => {
      element.fields = Object.fromEntries(await awu(Object.entries(element.fields))
        .map(async ([name, field]) => {
          let newField = field
          const fieldRealType = getFieldType(element, field, typeMap)
          if (fieldRealType !== undefined) {
            if ((await field.getType()).elemID.isEqual(recordRefElemId)) {
              newField = new Field(element, name, fieldRealType, field.annotations)
            }
            if ((await field.getType()).elemID.isEqual(new ElemID(NETSUITE, 'RecordRefList'))) {
              newField = new Field(element, name, new ListType(fieldRealType), field.annotations)
            }
          }
          return [name, newField]
        }).toArray())
    })
  },
})

export default filterCreator
