/*
 * Copyright 2024 Salto Labs Ltd.
 * Licensed under the Salto Terms of Use (the "License");
 * You may not use this file except in compliance with the License.  You may obtain a copy of the License at https://www.salto.io/terms-of-use
 *
 * CERTAIN THIRD PARTY SOFTWARE MAY BE CONTAINED IN PORTIONS OF THE SOFTWARE. See NOTICE FILE AT https://github.com/salto-io/salto/blob/main/NOTICES
 */
import { ElemID, InstanceElement, ObjectType, toChange } from '@salto-io/adapter-api'
import { userFieldKeyModificationValidator } from '../../src/change_validators/user_field_key_modification'
import { USER_FIELD_TYPE_NAME, ZENDESK } from '../../src/constants'

const createUserFieldInstance = (name: string, key: string): InstanceElement =>
  new InstanceElement(name, new ObjectType({ elemID: new ElemID(ZENDESK, USER_FIELD_TYPE_NAME) }), {
    key,
  })

describe('userFieldPlaceholderModificationValidator', () => {
  it('returns an error if the user field key is modified', async () => {
    const before = createUserFieldInstance('userField', 'oldKey')
    const after = createUserFieldInstance('userField', 'newKey')
    const changes = [toChange({ before, after })]
    const errors = await userFieldKeyModificationValidator(changes)
    expect(errors).toMatchObject([
      {
        elemID: before.elemID,
        severity: 'Warning',
        message: 'User field key is generated by Zendesk and cannot be modified',
        detailedMessage: 'User field key is generated by Zendesk and cannot be modified',
      },
    ])
  })

  it('does not return an error if the user field key is not modified', async () => {
    const before = createUserFieldInstance('userField', 'key')
    const after = createUserFieldInstance('userField', 'key')
    after.value.name = 'newName'
    const changes = [toChange({ before, after })]
    const errors = await userFieldKeyModificationValidator(changes)
    expect(errors).toHaveLength(0)
  })
})
